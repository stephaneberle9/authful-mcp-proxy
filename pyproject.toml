[project]
name = "authful-mcp-proxy"
dynamic = ["version"]
description = "A Model Context Protocol (MCP) proxy server that performs OIDC authentication to obtain access tokens for remote MCP servers protected by token validation, and bridges HTTP transport to local stdio for MCP clients like Claude Desktop."
readme = "README.md"
authors = [
    { name = "Stephan Eberle", email = "stephaneberle9@gmail.com" }
]
requires-python = ">=3.10"
dependencies = [
    "fastmcp>=2.12.4"
]

[dependency-groups]
dev = [
    "ty",
    "pre-commit>=4.3.0",
    "ruff",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.0.0",
    "inline-snapshot>=0.6.0",
]

[project.scripts]
authful-mcp-proxy = "authful_mcp_proxy.__main__:main"

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.uv-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.hatch.build.targets.wheel]
sources = ["src"]
exclude = [
  "scripts/",
  "*.log"
]

[tool.hatch.build.targets.sdist]  
sources = ["src"]
exclude = [
  "scripts/",
  "*.log"
]

[tool.uv]
default-groups = ["dev", "test"]

[tool.deptry]
exclude = [
  "*.log",
    ".venv/",
    "scripts/"
]

[tool.ruff.lint]
extend-select = ["I", "UP"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "I001", "RUF013"]
# allow imports not at the top of the file
"src/authful_mcp_proxy/__init__.py" = ["E402"]

[tool.codespell]
skip = "*.lock,pyproject.toml,*PythonImportHelper*"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=authful_mcp_proxy",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
